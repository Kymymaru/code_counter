import os
import tkinter as tk
from tkinter import filedialog, ttk
from collections import defaultdict


def count_lines_chars_and_get_hierarchy(directory, file_stats=None):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—è —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞, —Å–∏–º–≤–æ–ª—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É—è –∏–µ—Ä–∞—Ä—Ö–∏—é —Ñ–∞–π–ª–æ–≤.

    :param directory: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    :param file_stats: –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    :return: –ö–æ—Ä—Ç–µ–∂ (–∏–µ—Ä–∞—Ä—Ö–∏—è —Ñ–∞–π–ª–æ–≤, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤)
    """
    if file_stats is None:
        file_stats = defaultdict(lambda: {"lines": 0, "chars": 0})

    total_lines = 0
    total_chars = 0
    excluded_dirs = {'.git', '.idea', '__pycache__'}
    excluded_files = {'example.py'}
    hierarchy = []

    for item in sorted(os.listdir(directory)):
        path = os.path.join(directory, item)

        if os.path.isdir(path):
            if item not in excluded_dirs:
                sub_hierarchy, sub_lines, sub_chars = count_lines_chars_and_get_hierarchy(path, file_stats)
                hierarchy.append((item, sub_hierarchy))
                total_lines += sub_lines
                total_chars += sub_chars
        elif os.path.isfile(path):
            if item.endswith('.py') and item not in excluded_files:
                with open(path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    lines = len([line for line in content.splitlines() if line.strip()])
                    chars = len(content)
                hierarchy.append((item, (lines, chars)))
                total_lines += lines
                total_chars += chars
                file_stats[path] = {"lines": lines, "chars": chars}
            elif item not in excluded_files:
                hierarchy.append((item, (0, 0)))

    return hierarchy, total_lines, total_chars


class ProjectAnalyzer(tk.Tk):
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ –∏ —Å–∏–º–≤–æ–ª–æ–≤.
    """

    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
        """
        super().__init__()
        self.title("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞")
        self.geometry("1000x600")

        self.button = tk.Button(self, text="–í—ã–±—Ä–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é", command=self.select_directory)
        self.button.pack(pady=10)

        self.notebook = ttk.Notebook(self)
        self.notebook.pack(expand=True, fill='both', padx=10, pady=10)

        self.tree_frame = ttk.Frame(self.notebook)
        self.files_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.tree_frame, text="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞")
        self.notebook.add(self.files_frame, text="–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤")

        self.tree = ttk.Treeview(self.tree_frame)
        self.tree.pack(expand=True, fill='both')

        self.files_tree = ttk.Treeview(self.files_frame, columns=("File", "Lines", "Chars"), show="headings")
        self.files_tree.heading("File", text="–§–∞–π–ª")
        self.files_tree.heading("Lines", text="–°—Ç—Ä–æ–∫–∏")
        self.files_tree.heading("Chars", text="–°–∏–º–≤–æ–ª—ã")
        self.files_tree.column("File", width=600)
        self.files_tree.column("Lines", width=100, anchor="e")
        self.files_tree.column("Chars", width=100, anchor="e")
        self.files_tree.pack(expand=True, fill='both')

        self.total_label = tk.Label(self, text="")
        self.total_label.pack(pady=10)

    def select_directory(self):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é".
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞.
        """
        directory = filedialog.askdirectory()
        if directory:
            file_stats = defaultdict(lambda: {"lines": 0, "chars": 0})
            hierarchy, total_lines, total_chars = count_lines_chars_and_get_hierarchy(directory, file_stats)
            self.update_tree(hierarchy)
            self.update_files_list(file_stats)
            self.total_label.config(text=f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞: {total_lines}, —Å–∏–º–≤–æ–ª–æ–≤: {total_chars}")

    def update_tree(self, hierarchy, parent=""):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–µ—Ä–µ–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞.

        :param hierarchy: –ò–µ—Ä–∞—Ä—Ö–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
        :param parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –¥–µ—Ä–µ–≤–µ (–¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞)
        """
        self.tree.delete(*self.tree.get_children())
        self.add_to_tree(hierarchy, parent)

    def add_to_tree(self, items, parent):
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –¥–µ—Ä–µ–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞.

        :param items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        :param parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –¥–µ—Ä–µ–≤–µ
        """
        for item in items:
            if isinstance(item[1], list):
                folder = self.tree.insert(parent, 'end', text=f"üìÅ {item[0]}")
                self.add_to_tree(item[1], folder)
            else:
                icon = "üìÑ" if item[1][0] == 0 else "üêç"
                info = f" ({item[1][0]} —Å—Ç—Ä–æ–∫, {item[1][1]} —Å–∏–º–≤–æ–ª–æ–≤)" if item[1][0] > 0 else ""
                self.tree.insert(parent, 'end', text=f"{icon} {item[0]}{info}")

    def update_files_list(self, file_stats):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞.

        :param file_stats: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
        """
        self.files_tree.delete(*self.files_tree.get_children())
        sorted_files = sorted(file_stats.items(), key=lambda x: x[1]['lines'], reverse=True)
        for path, stats in sorted_files:
            self.files_tree.insert("", "end", values=(path, stats['lines'], stats['chars']))


if __name__ == "__main__":
    app = ProjectAnalyzer()
    app.mainloop()